name: GitHub Copilot License Management
# This workflow is triggered when an issue is labeled
on:
  issues:
    types:
      - labeled

# This workflow uses the GitHub Token to comment on the issues and close them
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ENTERPRISE_ID: ${{ secrets.ENTERPRISE_ID }}
  ENTERPRISE_NAME: ${{ secrets.ENTERPRISE_NAME }}
# This workflow contains two jobs: assign_github_copilot_license and remove_github_copilot_license
jobs:
  assign_github_copilot_license:
    name: Assign GitHub Copilot License
    # This job runs on the latest version of Ubuntu
    runs-on: ubuntu-latest
    # This job only runs if the label added to the issue is 'copilot-request'
    if: github.event.label.name == 'copilot-request'
    steps:
      # This step sets up Node.js version 20
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      # This step installs the @octokit/action npm package
      - run: npm install @octokit/action
      # This step gets a GitHub App installation access token
      - name: Get Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v3
        with:
          application_id: ${{ secrets.APPLICATION_ID }}
          application_private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}
      # This step assigns a GitHub Copilot license to the user who created the issue
      - name: Assign GitHub Copilot license
        id: assign_license
        continue-on-error: true
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }} 
          ENTERPRISE_ID: ${{ secrets.ENTERPRISE_ID }}
        with:
          script: |
            const { Octokit } = require("@octokit/action");            
            const octokit = new Octokit();            
            const response = await octokit.request('POST /enterprises/{org}/copilot/billing/selected_users', {
              org: process.env.ENTERPRISE_ID,
              selected_usernames: [context.payload.sender.login],
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            })
            return response.status >= 200 && response.status < 300 ? 'success' : 'failure'
      # If the previous step was successful, this step comments on the issue and closes it
      - name: Comment and close GitHub Issue on success
        if: steps.assign_license.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const { Octokit } = require("@octokit/action");            
            const octokit = new Octokit(); 
            await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Successfully assigned the GitHub Copilot license. <br> <br> Here are some resources to help you get started with GitHub Copilot: <br><ul><li><a href="https://learn.microsoft.com/training/paths/copilot">GitHub Copilot Fundamentals MS Learn Path</a></li><li><a href="https://resources.github.com/learn/pathways/copilot/essentials/essentials-of-github-copilot">Essentials of GitHub Copilot</a></li><li><a href="https://www.youtube.com/playlist?list=PLlrxD0HtieHgr23PS05FIncnih4dH9Na5">Introduction to GitHub Copilot</a></li><li><a href="https://github.com/microsoft/Mastering-GitHub-Copilot-for-Paired-Programming">Mastering GitHub Copilot for AI Paired Programming</a></li></ul>',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });
            await octokit.request('PATCH /repos/{owner}/{repo}/issues/{issue_number}', {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });
      # If the previous step failed, this step comments on the issue to notify about the failure
      - name: Comment GitHub Issue on failure
        if: steps.assign_license.outcome == 'failure'        
        uses: actions/github-script@v7
        with:
          script: |
            const { Octokit } = require("@octokit/action");            
            const octokit = new Octokit(); 
            await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Failed assigning the GitHub Copilot license. Please contact the organization administrator.',
              content: 'confused',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });

  remove_github_copilot_license:
    name: Remove GitHub Copilot License
    # This job runs on the latest version of Ubuntu
    runs-on: ubuntu-latest
    # This job only runs if the label added to the issue is 'copilot-remove'
    if: github.event.label.name == 'copilot-remove'
    steps:
      # This step sets up Node.js version 20
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      # This step installs the @octokit/action npm package
      - run: npm install @octokit/action @octokit/auth-app
      # This step gets the token
      - name: Generate a token
        id: generate-token
        uses: actions/github-script@v7
        with:
          script: |
            const { createAppAuth } = require("@octokit/auth-app");
            const auth = createAppAuth({
              appId: process.env.APP_ID,
              privateKey: process.env.PRIVATE_KEY
            });
            return auth({ type: "app" });
        env:
          APP_ID: ${{ secrets.APPLICATION_ID }}
          PRIVATE_KEY: ${{ secrets.APPLICATION_PRIVATE_KEY }}
      # This step finds the user's login email
      - name: Invite login email
        id: invite_login_email
        continue-on-error: true
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        with:
          script: |
            const { Octokit } = require("@octokit/action");            
            const octokit = new Octokit();            
            const response_find = await octokit.graphql(`query {
              user(login: "${context.payload.sender.login}") {
                email
                id
                login
              }
            }`, {
              headers: {
                'X-GitHub-Api-Version': '2022-11-28',
                'Authorization': `Bearer ${process.env.GH_TOKEN}`
              }
            })
            if (response_find.user.email) {
              // Invite the user to the enterprise
              const response_find_enterprise = await octokit.graphql(`query {
                enterprise(slug: "${process.env.ENTERPRISE_NAME}") {
                  id
                  name
                }
              }`, {
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28',
                  'Authorization': `Bearer ${process.env.GH_TOKEN}`
                }
              });
              console.log(response_find_enterprise);
              const response_invite = await octokit.graphql(`mutation {
                inviteEnterpriseMember(input: { email: "${response_find.user.email}", enterpriseId: "${response_find_enterprise.id}" }) {
                  clientMutationId
                  invitation {
                    email
                    invitee {
                      login
                      id
                    }
                  }
                }
              }`, {
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28',
                  'Authorization': `Bearer ${process.env.GH_TOKEN}`
                }
              });

              return response_invite.status >= 200 && response_invite.status < 300 ? 'success' : 'failure';
            }
            else {
              return 'failure';
            }
      # If the previous step was successful, this step comments on the issue and closes it
      - name: Comment and close GitHub Issue on success
        if: steps.invite_login_email.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const { Octokit } = require("@octokit/action");            
            const octokit = new Octokit(); 
            await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Successfully removed the GitHub Copilot license.',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });
            await octokit.request('PATCH /repos/{owner}/{repo}/issues/{issue_number}', {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });
      # If the previous step failed, this step comments on the issue to notify about the failure
      - name: Comment GitHub Issue on failure
        if: steps.remove_license.outcome == 'failure'        
        uses: actions/github-script@v7
        with:
          script: |
            const { Octokit } = require("@octokit/action");            
            const octokit = new Octokit(); 
            await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Failed removing the GitHub Copilot license. Please contact the organization administrator.',
              content: 'confused',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });